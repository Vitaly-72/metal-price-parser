import json
import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime
from typing import List, Dict
from config import TRIMET_ARMATURA_URLS, PARAD_ARMATURA_URLS

class Parser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        }
    
    def parse_trimet(self, urls: List[str]) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–º –¢—Ä–∏–º–µ—Ç"""
        all_products = []
        
        for i, url in enumerate(urls, 1):
            try:
                print(f"üîÑ –ü–∞—Ä—Å–∏–º –¢—Ä–∏–º–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i}: {url}")
                response = self.session.get(url, timeout=30)
                
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                    continue
                
                soup = BeautifulSoup(response.text, 'lxml')
                
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
                items = soup.find_all('div', class_='product-list__item-roznica')
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
                
                products = []
                for item in items:
                    product = self.parse_trimet_product(item, url)
                    if product:
                        products.append(product)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product['name']} - {product['price']} —Ä—É–±.")
                
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i}: {len(products)}")
                all_products.extend(products)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i}: {e}")
                continue
        
        return all_products
    
    def parse_trimet_product(self, item, url: str):
        """–ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä –¢—Ä–∏–º–µ—Ç"""
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_elem = item.find('a', class_='data_name_product')
            if not name_elem:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
                return None
            
            name = name_elem.get_text(strip=True)
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {name}")
            
            # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
            price_elem = item.find('p', class_='price-type-roznica')
            if not price_elem:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–Ω—ã")
                return None
            
            price_text = price_elem.get_text(strip=True)
            print(f"üí∞ –¢–µ–∫—Å—Ç —Ü–µ–Ω—ã: '{price_text}'")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price_match = re.search(r'(\d+[\s\d]*)\s*—Ä—É–±', price_text)
            if not price_match:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞")
                return None
            
            price_str = price_match.group(1).replace(' ', '')
            try:
                price = int(price_str)
            except ValueError:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É: {price_str}")
                return None
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {name} - {price} —Ä—É–±.")
            
            return {
                'name': name,
                'price': price,
                'url': url,
                'site': '–¢—Ä–∏–º–µ—Ç'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
            return None
    
    def parse_parad(self, urls: List[str]) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–º –ü–∞—Ä–∞–¥"""
        all_products = []
        
        for i, url in enumerate(urls, 1):
            try:
                print(f"üîÑ –ü–∞—Ä—Å–∏–º –ü–∞—Ä–∞–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i}: {url}")
                response = self.session.get(url, timeout=30)
                
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                    continue
                
                soup = BeautifulSoup(response.text, 'lxml')
                
                items = soup.find_all('div', class_='product-thumb')
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
                
                products = []
                for item in items:
                    product = self.parse_parad_product(item, url)
                    if product:
                        products.append(product)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product['name']} - {product['price']} —Ä—É–±.")
                
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i}: {len(products)}")
                all_products.extend(products)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i}: {e}")
                continue
        
        return all_products
    
    def parse_parad_product(self, item, url: str):
        """–ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä –ü–∞—Ä–∞–¥"""
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_elem = item.find('h4')
            if name_elem:
                name_elem = name_elem.find('a')
            if not name_elem:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ü–∞—Ä–∞–¥")
                return None
            
            name = name_elem.get_text(strip=True)
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ü–∞—Ä–∞–¥: {name}")
            
            # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
            price_elem = item.find('span', class_='price-new')
            if not price_elem:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                price_elem = item.find('p', class_='price')
            
            if not price_elem:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–Ω—ã –ü–∞—Ä–∞–¥")
                return None
            
            price_text = price_elem.get_text(strip=True)
            print(f"üí∞ –¢–µ–∫—Å—Ç —Ü–µ–Ω—ã –ü–∞—Ä–∞–¥: '{price_text}'")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price_match = re.search(r'(\d+)', price_text.replace(' ', ''))
            if not price_match:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –ü–∞—Ä–∞–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
                return None
            
            try:
                price = int(price_match.group(1))
            except ValueError:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É –ü–∞—Ä–∞–¥: {price_match.group(1)}")
                return None
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ü–∞—Ä–∞–¥: {name} - {price} —Ä—É–±.")
            
            return {
                'name': name,
                'price': price,
                'url': url,
                'site': '–ü–∞—Ä–∞–¥'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ –ü–∞—Ä–∞–¥: {e}")
            return None

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π...")
    
    parser = Parser()
    
    print("=" * 50)
    print("üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–°–ò–ù–ì –¢–†–ò–ú–ï–¢")
    print("=" * 50)
    trimet_products = parser.parse_trimet(TRIMET_ARMATURA_URLS)
    
    print("=" * 50)
    print("üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–°–ò–ù–ì –ü–ê–†–ê–î")
    print("=" * 50)
    parad_products = parser.parse_parad(PARAD_ARMATURA_URLS)
    
    print("=" * 50)
    print("üìä –ò–¢–û–ì–ò:")
    print("=" * 50)
    print(f"–¢—Ä–∏–º–µ—Ç: {len(trimet_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"–ü–∞—Ä–∞–¥: {len(parad_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        'trimet': {
            'products': trimet_products,
            'total_count': len(trimet_products),
            'urls': TRIMET_ARMATURA_URLS
        },
        'parad': {
            'products': parad_products,
            'total_count': len(parad_products),
            'urls': PARAD_ARMATURA_URLS
        },
        'timestamp': datetime.now().isoformat()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results.json")
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if trimet_products:
        print("\n=== –¢–û–í–ê–†–´ –¢–†–ò–ú–ï–¢ ===")
        for i, product in enumerate(trimet_products, 1):
            print(f"{i}. {product['name']} - {product['price']} —Ä—É–±.")
    else:
        print("\n‚ùå –¢—Ä–∏–º–µ—Ç: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞")
        print("2. HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        print("3. –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤")
    
    if parad_products:
        print("\n=== –¢–û–í–ê–†–´ –ü–ê–†–ê–î ===")
        for i, product in enumerate(parad_products, 1):
            print(f"{i}. {product['name']} - {product['price']} —Ä—É–±.")

if __name__ == "__main__":
    main()
