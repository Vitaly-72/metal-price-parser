import json
import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime
from typing import List, Dict
from config import TRIMET_ARMATURA_URLS, PARAD_ARMATURA_URLS, TRIMET_TEST_DATA

class Parser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Referer': 'https://google.com/',
        }
    
    def parse_trimet(self, urls: List[str]) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–º –¢—Ä–∏–º–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¢—Ä–∏–º–µ—Ç...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            url = urls[0]
            print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫: {url}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º retry
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'lxml')
                items = soup.find_all('div', class_='product-list__item-roznica')
                
                products = []
                for item in items:
                    product = self.parse_trimet_product(item, url)
                    if product:
                        products.append(product)
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¢—Ä–∏–º–µ—Ç: {len(products)}")
                return products
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                raise Exception(f"HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¢—Ä–∏–º–µ—Ç: {e}")
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢—Ä–∏–º–µ—Ç")
            return TRIMET_TEST_DATA
    
    def parse_trimet_product(self, item, url: str):
        """–ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä –¢—Ä–∏–º–µ—Ç"""
        try:
            name_elem = item.find('a', class_='data_name_product')
            price_elem = item.find('p', class_='price-type-roznica')
            
            if name_elem and price_elem:
                name = name_elem.get_text(strip=True)
                price_text = price_elem.get_text(strip=True)
                
                price_match = re.search(r'(\d+)\s*—Ä—É–±', price_text)
                price = int(price_match.group(1)) if price_match else 0
                
                return {
                    'name': name,
                    'price': price,
                    'url': url,
                    'site': '–¢—Ä–∏–º–µ—Ç'
                }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ –¢—Ä–∏–º–µ—Ç: {e}")
        return None
    
    def parse_parad(self, urls: List[str]) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–º –ü–∞—Ä–∞–¥"""
        all_products = []
        
        for i, url in enumerate(urls, 1):
            try:
                print(f"üîÑ –ü–∞—Ä—Å–∏–º –ü–∞—Ä–∞–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i}: {url}")
                response = self.session.get(url, timeout=15)
                
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                    continue
                
                soup = BeautifulSoup(response.text, 'lxml')
                items = soup.find_all('div', class_='product-thumb')
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
                
                products = []
                for item in items:
                    product = self.parse_parad_product(item, url)
                    if product:
                        products.append(product)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product['name']} - {product['price']} —Ä—É–±.")
                
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i}: {len(products)}")
                all_products.extend(products)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–∞—Ä–∞–¥ {i}: {e}")
                continue
        
        return all_products
    
    def parse_parad_product(self, item, url: str):
        """–ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä –ü–∞—Ä–∞–¥"""
        try:
            name_elem = item.find('h4')
            if name_elem:
                name_elem = name_elem.find('a')
            price_elem = item.find('span', class_='price-new')
            
            if name_elem and price_elem:
                name = name_elem.get_text(strip=True)
                price_text = price_elem.get_text(strip=True)
                
                price_match = re.search(r'(\d+)', price_text.replace(' ', ''))
                price = int(price_match.group(1)) if price_match else 0
                
                return {
                    'name': name,
                    'price': price,
                    'url': url,
                    'site': '–ü–∞—Ä–∞–¥'
                }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ –ü–∞—Ä–∞–¥: {e}")
        return None

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    parser = Parser()
    
    print("=" * 50)
    print("üîç –ü–ê–†–°–ò–ù–ì –¢–†–ò–ú–ï–¢")
    print("=" * 50)
    trimet_products = parser.parse_trimet(TRIMET_ARMATURA_URLS)
    
    print("=" * 50)
    print("üîç –ü–ê–†–°–ò–ù–ì –ü–ê–†–ê–î")
    print("=" * 50)
    parad_products = parser.parse_parad(PARAD_ARMATURA_URLS)
    
    print("=" * 50)
    print("üìä –ò–¢–û–ì–ò:")
    print("=" * 50)
    print(f"–¢—Ä–∏–º–µ—Ç: {len(trimet_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"–ü–∞—Ä–∞–¥: {len(parad_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        'trimet': {
            'products': trimet_products,
            'total_count': len(trimet_products),
            'note': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–∞' if trimet_products == TRIMET_TEST_DATA else '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        },
        'parad': {
            'products': parad_products,
            'total_count': len(parad_products)
        },
        'timestamp': datetime.now().isoformat()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results.json")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if trimet_products:
        print("\n=== –¢–û–í–ê–†–´ –¢–†–ò–ú–ï–¢ ===")
        for i, product in enumerate(trimet_products, 1):
            print(f"{i}. {product['name']} - {product['price']} —Ä—É–±.")
    
    if parad_products:
        print("\n=== –¢–û–í–ê–†–´ –ü–ê–†–ê–î ===")
        for i, product in enumerate(parad_products, 1):
            print(f"{i}. {product['name']} - {product['price']} —Ä—É–±.")

if __name__ == "__main__":
    main()
